blueprint:
  name: Advanced Low Battery Detection with Custom Thresholds
  description: |
    Überwacht alle Batteriesensoren mit individuell konfigurierbaren Schwellwerten 
    und bietet mehrere Ausgabeformate (Text, HTML, Markdown) für verschiedene 
    Benachrichtigungskanäle.
    
    **Setup:**
    1. Erstelle Input-Number-Helper für benutzerdefinierte Schwellwerte
    2. Benenne sie z.B.: input_number.battery_threshold_smartphone
    3. Referenziere diese Helper in der "Custom Thresholds" Konfiguration
    
  domain: automation
  input:
    threshold:
      name: Standard-Warnschwelle
      description: Standard-Schwellwert für alle Sensoren ohne spezifische Konfiguration
      default: 20
      selector:
        number:
          min: 5.0
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 5.0
    
    threshold_critical:
      name: Kritische Schwelle
      description: Schwellwert für kritische Batteriestände (höhere Priorität)
      default: 10
      selector:
        number:
          min: 5.0
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 5.0
    
    custom_thresholds:
      name: Benutzerdefinierte Schwellwerte (optional)
      description: |
        Individuelle Schwellwerte für bestimmte Geräte.
        Format: Eine Zeile pro Gerät
        
        Beispiel:
        sensor.smartphone_battery=15
        sensor.tablet_battery=20
        sensor.rauchmelder_batterie=30
        
        Leer lassen, wenn nicht benötigt.
      default: ''
      selector:
        text:
          multiline: true
    
    time:
      name: Prüfzeit
      description: Tägliche Prüfzeit für Batteriestand
      default: '10:00:00'
      selector:
        time: {}
    
    day:
      name: Wochentag
      description: '0 = Täglich, 1 = Montag ... 7 = Sonntag'
      default: 0
      selector:
        number:
          min: 0.0
          max: 7.0
          mode: slider
          step: 1.0
    
    exclude:
      name: Ausgeschlossene Sensoren
      description: Sensoren, die nicht überwacht werden sollen
      default: {entity_id: []}
      selector:
        target:
          entity:
            device_class: battery
    
    include_last_updated:
      name: Letzte Aktualisierung anzeigen
      description: Zeigt an, wann der Sensor zuletzt aktualisiert wurde
      default: true
      selector:
        boolean: {}
    
    stale_data_days:
      name: Warnung bei veralteten Daten (Tage)
      description: Markiert Sensoren als veraltet, wenn sie länger als X Tage nicht aktualisiert wurden (0 = deaktiviert)
      default: 7
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: 'Tage'
          mode: slider
          step: 1
    
    include_area:
      name: Bereich/Raum anzeigen
      description: Zeigt den Raum/Bereich des Geräts an (falls verfügbar)
      default: true
      selector:
        boolean: {}
    
    actions:
      name: Aktionen
      description: |
        Benachrichtigungen oder andere Aktionen.
        Verfügbare Variablen:
        - {{sensors}} = Einfache Textliste
        - {{sensors_html}} = HTML-formatiert (für Telegram)
        - {{sensors_markdown}} = Markdown-formatiert
        - {{sensors_count}} = Anzahl der Sensoren
        - {{critical_count}} = Anzahl kritischer Sensoren
      selector:
        action: {}
  
  source_url: https://gist.github.com/sbyx/advanced-battery-monitoring

variables:
  day: !input 'day'
  threshold_default: !input 'threshold'
  threshold_critical: !input 'threshold_critical'
  exclude: !input 'exclude'
  custom_thresholds_input: !input 'custom_thresholds'
  include_last_updated: !input 'include_last_updated'
  include_area: !input 'include_area'
  stale_data_days: !input 'stale_data_days'
  
  # Parse custom thresholds from simple text format
  custom_thresholds: >-
    {% set ns = namespace(result={}) %}
    {% if custom_thresholds_input and custom_thresholds_input != '' %}
      {% for line in custom_thresholds_input.split('\n') %}
        {% set line = line.strip() %}
        {% if line and '=' in line and not line.startswith('#') %}
          {% set parts = line.split('=', 1) %}
          {% if parts | length == 2 %}
            {% set entity = parts[0].strip() %}
            {% set value = parts[1].strip() | int(0) %}
            {% if value > 0 and entity %}
              {% set ns.result = dict(ns.result, **{entity: value}) %}
            {% endif %}
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}
    {{ ns.result }}
  
  # Sammle alle Low-Battery Sensoren mit Details
  battery_data: >-
    {% set result = namespace(sensors=[]) %}
    
    {# Verarbeite normale Batteriesensoren #}
    {% for state in states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
      {% if not state.entity_id in exclude.entity_id %}
        {% set battery_level = state.state | int(-1) %}
        {% if battery_level >= 0 %}
          {# Prüfe auf benutzerdefinierten Schwellwert #}
          {% set custom_threshold = custom_thresholds.get(state.entity_id, none) %}
          {% if custom_threshold %}
            {% set threshold = custom_threshold | int %}
          {% else %}
            {% set threshold = threshold_default | int %}
          {% endif %}
          
          {% if battery_level < threshold %}
            {# Wenn custom threshold gesetzt ist, wird dieser auch für "kritisch" verwendet (halber Wert) #}
            {% if custom_threshold %}
              {% set effective_critical = (custom_threshold / 2) | int %}
            {% else %}
              {% set effective_critical = threshold_critical %}
            {% endif %}
            {% set is_critical = battery_level < effective_critical %}
            {% set area_name = area_name(state.entity_id) if include_area else none %}
            {% set last_updated = state.last_updated.strftime('%d.%m %H:%M') if include_last_updated else none %}
            {% set is_stale = (stale_data_days > 0 and (now() - state.last_updated).days >= stale_data_days) %}
            
            {% set sensor_info = {
              'name': state.name,
              'entity_id': state.entity_id,
              'level': battery_level,
              'threshold': threshold,
              'is_critical': is_critical,
              'area': area_name,
              'last_updated': last_updated,
              'is_stale': is_stale
            } %}
            {% set result.sensors = result.sensors + [sensor_info] %}
          {% endif %}
        {% endif %}
      {% endif %}
    {% endfor %}
    
    {# Verarbeite binäre Batteriesensoren #}
    {% for state in states.binary_sensor | selectattr('attributes.device_class', '==', 'battery') | selectattr('state', '==', 'on') %}
      {% if not state.entity_id in exclude.entity_id %}
        {% set area_name = area_name(state.entity_id) if include_area else none %}
        {% set last_updated = state.last_updated.strftime('%d.%m %H:%M') if include_last_updated else none %}
        {% set is_stale = (stale_data_days > 0 and (now() - state.last_updated).days >= stale_data_days) %}
        
        {% set sensor_info = {
          'name': state.name,
          'entity_id': state.entity_id,
          'level': 0,
          'threshold': threshold_default,
          'is_critical': true,
          'area': area_name,
          'last_updated': last_updated,
          'is_stale': is_stale
        } %}
        {% set result.sensors = result.sensors + [sensor_info] %}
      {% endif %}
    {% endfor %}
    
    {{ result.sensors }}
  
  # Zähler
  sensors_count: >-
    {{ battery_data | length }}
  
  critical_count: >-
    {{ battery_data | selectattr('is_critical', '==', true) | list | length }}
  
  stale_count: >-
    {{ battery_data | selectattr('is_stale', '==', true) | list | length }}
  
  # EINFACHE TEXTAUSGABE
  sensors: >-
    {% if battery_data | length == 0 %}
      Keine Batteriewarnungen
    {% else %}
      {% set critical = battery_data | selectattr('is_critical', '==', true) | list %}
      {% set low = battery_data | rejectattr('is_critical', '==', true) | list %}
      
      {% if critical | length > 0 %}
        KRITISCH:
        {% for sensor in critical %}
          - {{ sensor.name }}: {{ sensor.level }}%{% if sensor.area %} ({{ sensor.area }}){% endif %}{% if sensor.is_stale %} [VERALTET!]{% endif %}
        {% endfor %}
      {% endif %}
      
      {% if low | length > 0 %}
        {% if critical | length > 0 %}

        {% endif %}NIEDRIG:
        {% for sensor in low %}
          - {{ sensor.name }}: {{ sensor.level }}%{% if sensor.area %} ({{ sensor.area }}){% endif %}{% if sensor.is_stale %} [VERALTET!]{% endif %}
        {% endfor %}
      {% endif %}
    {% endif %}
  
  # HTML-FORMATIERTE AUSGABE (für Telegram)
  sensors_html: >-
    {% if battery_data | length == 0 %}
      ✅ <b>Keine Batteriewarnungen</b>
    {% else %}
      {% set critical = battery_data | selectattr('is_critical', '==', true) | list %}
      {% set low = battery_data | rejectattr('is_critical', '==', true) | list %}
      
      <b>🔋 Batterie-Warnung</b>
      
      {% if critical | length > 0 %}
        <b>🚨 KRITISCH ({{ critical | length }}):</b>
        {% for sensor in critical %}
          • <b>{{ sensor.name }}</b>: {{ sensor.level }}%{% if sensor.is_stale %} ⚠️ <i>VERALTET</i>{% endif %}
          {% if sensor.area %}  📍 {{ sensor.area }}{% endif %}
          {% if sensor.last_updated %}  🕐 {{ sensor.last_updated }}{% endif %}
        {% endfor %}
      {% endif %}
      
      {% if low | length > 0 %}
        {% if critical | length > 0 %}

        {% endif %}<b>⚠️ NIEDRIG ({{ low | length }}):</b>
        {% for sensor in low %}
          • {{ sensor.name }}: {{ sensor.level }}%{% if sensor.is_stale %} ⚠️ <i>VERALTET</i>{% endif %}
          {% if sensor.area %}  📍 {{ sensor.area }}{% endif %}
          {% if sensor.last_updated %}  🕐 {{ sensor.last_updated }}{% endif %}
        {% endfor %}
      {% endif %}
    {% endif %}
  
  # MARKDOWN-AUSGABE
  sensors_markdown: >-
    {% if battery_data | length == 0 %}
      ✅ **Keine Batteriewarnungen**
    {% else %}
      {% set critical = battery_data | selectattr('is_critical', '==', true) | list %}
      {% set low = battery_data | rejectattr('is_critical', '==', true) | list %}
      
      **🔋 Batterie-Warnung**
      
      {% if critical | length > 0 %}
        **🚨 KRITISCH ({{ critical | length }}):**
        {% for sensor in critical %}
          - **{{ sensor.name }}**: {{ sensor.level }}%{% if sensor.is_stale %} ⚠️ *VERALTET*{% endif %}{% if sensor.area %} (📍 {{ sensor.area }}){% endif %}{% if sensor.last_updated %} - 🕐 {{ sensor.last_updated }}{% endif %}
        {% endfor %}
      {% endif %}
      
      {% if low | length > 0 %}
        {% if critical | length > 0 %}

        {% endif %}**⚠️ NIEDRIG ({{ low | length }}):**
        {% for sensor in low %}
          - {{ sensor.name }}: {{ sensor.level }}%{% if sensor.is_stale %} ⚠️ *VERALTET*{% endif %}{% if sensor.area %} (📍 {{ sensor.area }}){% endif %}{% if sensor.last_updated %} - 🕐 {{ sensor.last_updated }}{% endif %}
        {% endfor %}
      {% endif %}
    {% endif %}

trigger:
  - platform: time
    at: !input 'time'

condition:
  - condition: template
    value_template: '{{ sensors_count > 0 and (day | int == 0 or day | int == now().isoweekday()) }}'

action:
  - choose: []
    default: !input 'actions'

mode: single