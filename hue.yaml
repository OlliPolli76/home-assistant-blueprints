blueprint:
  name: Hue Wall Module – v21.81
  description: >
    Steuert Hue-Leuchten über ein Wandmodul. Unterstützt Szenen, Helligkeit, Farbwechsel und Debug-Logging.
    Version v21.81 – Doppelklick-Erkennung auf press Events umgestellt (Zeit zwischen zwei press statt press_release).
  domain: automation
  source_url: https://raw.githubusercontent.com/OlliPolli76/home-assistant-blueprints/main/hue.yaml
  author: OlliPolli76

  input:
    switch_device:
      name: Hue Wall Switch (Z2M)
      description: >
        Wähle das Zigbee-Wandmodul, das über MQTT eingebunden ist.
        Der MQTT-Topic wird automatisch aus dem Device erkannt.
      selector:
        device:
          integration: mqtt

    z2m_friendly_name:
      name: Zigbee2MQTT Friendly Name (optional)
      description: >
        Nur ausfüllen, wenn die automatische Erkennung nicht funktioniert.
        Gib hier den exakten Friendly Name ein, wie er in Zigbee2MQTT konfiguriert ist.
        Beispiel: "wohnzimmer_schalter" für Topic "zigbee2mqtt/wohnzimmer_schalter/action"
      default: ""
      selector:
        text:
          multiline: false

    target_light_left:
      name: Linke Lampe oder Gruppe
      description: >
        Die Lampe oder Gruppe, die bei linker Betätigung gesteuert wird.
      selector:
        entity:
          domain: light

    target_light_right:
      name: Rechte Lampe oder Gruppe
      description: >
        Die Lampe oder Gruppe, die bei rechter Betätigung gesteuert wird.
      selector:
        entity:
          domain: light

    reference_light_left:
      name: Referenzlampe links (optional)
      description: >
        Optional: Eine andere Lampe, deren Helligkeit als Referenz für die linke Seite dient.
      default: ""
      selector:
        entity:
          domain: light

    reference_light_right:
      name: Referenzlampe rechts (optional)
      description: >
        Optional: Eine andere Lampe, deren Helligkeit als Referenz für die rechte Seite dient.
      default: ""
      selector:
        entity:
          domain: light

    dim_dir_left:
      name: Richtungs-Boolean links
      description: >
        Input_boolean zur Steuerung der Dimmrichtung links (aufwärts/abwärts).
      selector:
        entity:
          domain: input_boolean

    dim_dir_right:
      name: Richtungs-Boolean rechts
      description: >
        Input_boolean zur Steuerung der Dimmrichtung rechts (aufwärts/abwärts).
      selector:
        entity:
          domain: input_boolean

    move_speed_left:
      name: Schrittweite links
      description: >
        Wie stark sich die Helligkeit bei Halten verändert (linke Seite).
      default: 40
      selector:
        number:
          min: 10
          max: 80
          step: 5

    move_speed_right:
      name: Schrittweite rechts
      description: >
        Wie stark sich die Helligkeit bei Halten verändert (rechte Seite).
      default: 40
      selector:
        number:
          min: 10
          max: 80
          step: 5

    dim_method_left:
      name: Dimm-Methode links
      description: >
        Methode zur Dimmung links – automatisch oder manuell wählbar.
      default: auto
      selector:
        select:
          options: [auto, brightness_step, brightness_pct, brightness]

    dim_method_right:
      name: Dimm-Methode rechts
      description: >
        Methode zur Dimmung rechts – automatisch oder manuell wählbar.
      default: auto
      selector:
        select:
          options: [auto, brightness_step, brightness_pct, brightness]

    target_cover_left:
      name: Linkes Cover (optional)
      description: >
        Optional: Ein Cover-Entity, das bei Doppelklick links geöffnet wird.
      default: ""
      selector:
        entity:
          domain: cover

    target_cover_right:
      name: Rechtes Cover (optional)
      description: >
        Optional: Ein Cover-Entity, das bei Doppelklick rechts geschlossen wird.
      default: ""
      selector:
        entity:
          domain: cover

    last_press_helper_left:
      name: Zeitstempel-Helfer Links (input_datetime)
      description: >
        Input_datetime Entity zur Doppelklick-Erkennung links.
        Erstelle: Einstellungen → Geräte & Dienste → Helfer → Datum und/oder Zeit
        Aktiviere: "Datum" und "Zeit"
      selector:
        entity:
          domain: input_datetime

    last_press_helper_right:
      name: Zeitstempel-Helfer Rechts (input_datetime)
      description: >
        Input_datetime Entity zur Doppelklick-Erkennung rechts.
        Erstelle: Einstellungen → Geräte & Dienste → Helfer → Datum und/oder Zeit
        Aktiviere: "Datum" und "Zeit"
      selector:
        entity:
          domain: input_datetime

    min_brightness:
      name: Mindesthelligkeit
      description: >
        Untergrenze für die Dimmung – verhindert vollständiges Ausschalten.
      default: 5
      selector:
        number:
          min: 1
          max: 50
          step: 1

    log_level:
      name: Log-Level
      description: >
        Steuerung der Detailtiefe im System-Log.
      default: debug
      selector:
        select:
          options: [debug, info, warning, error, critical]

trigger:
  - platform: mqtt
    topic: "zigbee2mqtt/+/action"

mode: restart
max_exceeded: silent

action:
  # Device-Filterung: Nur das ausgewählte Device verarbeiten
  - variables:
      log_level_input: !input log_level
      switch_device_id: !input switch_device
      manual_name: !input z2m_friendly_name
      target_light_left: !input target_light_left
      target_light_right: !input target_light_right
      reference_light_left: !input reference_light_left
      reference_light_right: !input reference_light_right
      dim_dir_left: !input dim_dir_left
      dim_dir_right: !input dim_dir_right
      move_speed_left: !input move_speed_left
      move_speed_right: !input move_speed_right
      dim_method_left: !input dim_method_left
      dim_method_right: !input dim_method_right
      target_cover_left: !input target_cover_left
      target_cover_right: !input target_cover_right
      last_press_left: !input last_press_helper_left
      last_press_right: !input last_press_helper_right
      min_brightness: !input min_brightness
      actual_device: "{{ trigger.topic.split('/')[1] }}"
      # Automatische Erkennung: Nimm den Device-Namen direkt
      auto_device_name: >-
        {{ device_attr(switch_device_id, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
      expected_device: "{{ manual_name if manual_name | length > 0 else auto_device_name }}"
      is_correct_device: "{{ expected_device | lower == actual_device | lower }}"

  - service: system_log.write
    data:
      message: >
        [Device Check]
        trigger_topic={{ trigger.topic }},
        actual_device={{ actual_device }},
        expected_device={{ expected_device }},
        auto_detected={{ auto_device_name }},
        manual_override={{ manual_name }},
        is_correct={{ is_correct_device }}
      level: "{{ log_level_input }}"

  # Abbruch wenn falsches Device
  - condition: template
    value_template: "{{ is_correct_device }}"

  # Ab hier nur noch Aktionen für das korrekte Device
  - variables:
      trig: "{{ trigger.payload }}"
      is_left: "{{ trig.startswith('left') }}"
      active_light: "{{ target_light_left if is_left else target_light_right }}"
      ref_light: "{{ reference_light_left if is_left else reference_light_right }}"
      use_ref: "{{ ref_light | length > 0 }}"
      active_dir: "{{ dim_dir_left if is_left else dim_dir_right }}"
      speed: "{{ move_speed_left if is_left else move_speed_right }}"
      method: "{{ dim_method_left if is_left else dim_method_right }}"
      cover: "{{ target_cover_left if is_left else target_cover_right }}"
      max_raw: 254
      current_brightness: >-
        {% set ref = ref_light if use_ref else active_light %}
        {{ state_attr(ref, 'brightness') | int(0) }}

  - service: system_log.write
    data:
      message: >
        [Trigger]
        payload={{ trig }},
        is_left={{ is_left }},
        active_light={{ active_light }},
        ref_light={{ ref_light }},
        use_ref={{ use_ref }},
        active_dir={{ active_dir }},
        speed={{ speed }},
        method={{ method }},
        cover={{ cover }},
        current_brightness={{ current_brightness }}
      level: "{{ log_level_input }}"

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trig in ['left_hold','right_hold'] }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ current_brightness + speed > max_raw and is_state(active_dir, 'on') }}"
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ active_dir }}"
                  - service: system_log.write
                    data:
                      message: "[Dimmrichtung] Max erreicht – Richtung auf 'abwärts' gesetzt"
                      level: "{{ log_level_input }}"

              - conditions:
                  - condition: template
                    value_template: "{{ current_brightness - speed < min_brightness and is_state(active_dir, 'off') }}"
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ active_dir }}"
                  - service: system_log.write
                    data:
                      message: "[Dimmrichtung] Min erreicht – Richtung auf 'aufwärts' gesetzt"
                      level: "{{ log_level_input }}"

          - variables:
              going_up: "{{ is_state(active_dir, 'on') }}"
              step: >-
                {% if going_up %}
                  {% set remaining = max_raw - current_brightness %}
                  {{ [speed, [remaining, 0] | max] | min }}
                {% else %}
                  {% set remaining = current_brightness - min_brightness %}
                  {{ -([speed, [remaining, 0] | max] | min) }}
                {% endif %}
              next_bri: "{{ (current_brightness + step) | int }}"
              stop_now: >-
                {{ (going_up and current_brightness >= max_raw)
                or (not going_up and current_brightness <= min_brightness) }}
              feats: >-
                {% set ref = ref_light if use_ref else active_light %}
                {{ state_attr(ref, 'supported_features') | int(0) }}
              support_basic: "{{ (feats % 2) > 0 }}"
              support_trans: "{{ ((feats // 64) % 2) > 0 }}"
              dim_key: >-
                {% if method != 'auto' %}
                  {{ method }}
                {% elif support_basic and not support_trans %}
                  brightness
                {% elif support_trans %}
                  brightness_step
                {% else %}
                  brightness_pct
                {% endif %}
              dim_val: >-
                {% if stop_now %}
                  0
                {% elif dim_key == 'brightness_pct' %}
                  {{ ((next_bri / max_raw * 100) | round) }}
                {% elif dim_key == 'brightness_step' %}
                  {{ step }}
                {% else %}
                  {{ next_bri }}
                {% endif %}

          - service: system_log.write
            data:
              message: >
                [Dimm-Berechnung]
                going_up={{ going_up }},
                step={{ step }},
                next_bri={{ next_bri }},
                dim_key={{ dim_key }},
                dim_val={{ dim_val }},
                stop_now={{ stop_now }},
                support_basic={{ support_basic }},
                support_trans={{ support_trans }},
                features_raw={{ feats }},
                lamp={{ active_light }}
              level: "{{ log_level_input }}"

          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ dim_key == 'brightness' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ active_light }}"
                    data:
                      transition: 1
                      brightness: "{{ dim_val }}"
              - conditions:
                  - condition: template
                    value_template: "{{ dim_key == 'brightness_pct' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ active_light }}"
                    data:
                      transition: 1
                      brightness_pct: "{{ dim_val }}"
              - conditions:
                  - condition: template
                    value_template: "{{ dim_key == 'brightness_step' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ active_light }}"
                    data:
                      transition: 1
                      brightness_step: "{{ dim_val }}"

      - conditions:
          - condition: template
            value_template: "{{ trig in ['left_hold_release','right_hold_release'] }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ active_light }}"
            data:
              brightness_step: 0
          - service: input_boolean.toggle
            target:
              entity_id: "{{ active_dir }}"
          - service: system_log.write
            data:
              message: "[Hold Release] Reset brightness_step + toggle Richtung"
              level: "{{ log_level_input }}"

      - conditions:
          - condition: template
            value_template: "{{ trig in ['left_press','right_press'] }}"
        sequence:
          - variables:
              press_helper: "{{ last_press_left if is_left else last_press_right }}"
              last_press_time: "{{ states(press_helper) }}"
              time_diff_ms: >-
                {% if last_press_time not in ['unknown', 'unavailable', ''] %}
                  {{ (as_timestamp(now()) - as_timestamp(last_press_time)) * 1000 | int }}
                {% else %}
                  99999
                {% endif %}
              is_double_press: "{{ time_diff_ms < 300 }}"

          - service: system_log.write
            data:
              message: >
                [Press]
                trig={{ trig }},
                last_press={{ last_press_time }},
                time_diff_ms={{ time_diff_ms }},
                is_double_press={{ is_double_press }}
              level: "{{ log_level_input }}"

          # Zeitstempel aktualisieren für nächsten Press
          - service: input_datetime.set_datetime
            target:
              entity_id: "{{ press_helper }}"
            data:
              datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

      - conditions:
          - condition: template
            value_template: "{{ trig in ['left_press_release','right_press_release'] }}"
        sequence:
          - variables:
              press_helper: "{{ last_press_left if is_left else last_press_right }}"
              last_press_time: "{{ states(press_helper) }}"
              time_diff_ms: >-
                {% if last_press_time not in ['unknown', 'unavailable', ''] %}
                  {{ (as_timestamp(now()) - as_timestamp(last_press_time)) * 1000 | int }}
                {% else %}
                  99999
                {% endif %}
              is_double_press: "{{ time_diff_ms < 300 }}"

          - service: system_log.write
            data:
              message: >
                [Press Release]
                trig={{ trig }},
                last_press={{ last_press_time }},
                time_diff_ms={{ time_diff_ms }},
                is_double_press={{ is_double_press }},
                cover={{ cover }}
              level: "{{ log_level_input }}"

          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ is_double_press and cover != '' }}"
                sequence:
                  - service: >
                      {% if trig.startswith('left') %}
                        cover.open_cover
                      {% else %}
                        cover.close_cover
                      {% endif %}
                    target:
                      entity_id: "{{ cover }}"
                  - service: system_log.write
                    data:
                      message: "[Double Press] Cover gesteuert: {{ cover }}"
                      level: "{{ log_level_input }}"
              - conditions: []
                sequence:
                  - service: light.toggle
                    target:
                      entity_id: "{{ active_light }}"
                  - service: system_log.write
                    data:
                      message: "[Single Press] Licht getoggelt: {{ active_light }}"
                      level: "{{ log_level_input }}"